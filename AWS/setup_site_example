Please note: Both AWS hosting and Freenom domain we are going to use, are free for ONE year. Please make sure to cancel, move or continue paying for the services you create. While Freenom will simply cancel your domain, AWS will charge you according to the services you use.

Step 1 - Creating your domain in Freenom:
Go to Freenom.
Go to Sign In and Sign In using Google or Facebook method.
Once logged in, go to Services > Register a new domain.
Choose your domain(without TLD) and click Check Availability. In this example, we will use incaptestsite.tk, but you can choose your own.
You will have a choice of TLDs - .tk, .ga, .ml, .cf or .gq . Choose the one you like, click get it now and Checkout.
Change the period to 12 Months @ Free and click Continue.
Complete your details, mark I have read and agree to the Terms & Conditions and click Complete Order.
Congratulations! You now own a domain! It is not pointing anywhere yet, but it will later.
Step 2 - Creating AWS account:
Go to this link and create free AWS account. Account Type will be Personal.
After completing all the personal details and clicking Continue, you will be asked to input Credit card details. Don't worry, you will not be charged as long as you don't exceed the AWS Free Tier usage.
Confirm your identity using SMS or Voice Call.
Choose Basic Plan (Free).
Sign In to AWS Console.
Step 3 - Creating EC2 Instance (Virtual Machine):
Go to Services > Compute > EC2.
Under Create Instance, click Launch Instance.
Select Ubuntu Server 18.04 or Ubuntu Server 16.04 LTS. You can choose Windows Server, however, this particular article will focus on configuring Ubuntu server.
In the next step, make sure you have selected Family: General Purpose and Type: t2.micro. Click Review and Launch and then Launch.
Next you will get a pop up to select or create a key pair. Select Create a new key pair, give it a name and click Download Key Pair. Remember where you saved the key pair, as it is your private key, which you will use to connect to your virtual machine over SSH.
Click Launch Instances.
Congratulations! Your server is now Online! You can find it in Services > EC2 > Running Instances.
Step 4 - Connecting to your EC2 Instance:
First, change permission of the key pair(private key) you've downloaded. You can do it using chmod or openssl: 

Using chmod, run the following command: chmod 400 mydownloadedkey.pem
Converting the key to RSA using openssl, run the following command: openssl rsa -in mydownloadedkey.pem -out mydownloadedkeyRSA.pem
To connect to your instance, you will need the IP address of the instance. You can find it in the instance details in Services > EC2 > Running Instances > IPv4 Public IP.
Use the following command to connect to your instance: ssh -i path/to/yourAWS/privatekey.pem ubuntu@<Your Public IP address here>
Should you find the following message, you may press yes:
The authenticity of host '<IP> (IP)' can't be established.
ECDSA key fingerprint is fingerprint.
Are you sure you want to continue connecting (yes/no)?



Step 5 - Setting up Apache2 server with SSL support:
Start by installing Apache2, using the following command: sudo apt-get install apache2 -y
Go to /var/www (cd /var/www) and create a new folder for your domain (sudo mkdir mydomainname.tk).
Go to /etc/apache2/sites-available (cd /etc/apache2/sites-available) and generate a self-signed certificate using the following command:
sudo openssl req -x509 -newkey rsa:4096 -sha256 -days 3650 -keyout incaptestsite.tk.key -out incaptestsite.tk.crt -subj /CN=incaptestsite.tk
Make sure to change the incaptestsite.tk to your own domain.
Choose a passphrase which we will use when launching the server.
This will create two files, incaptestsite.tk.key(your private key) and incaptestsite.tk.crt(your certificate).
Open 000-default.conf in nano editor (sudo nano 000-default.conf). 000-default.conf is a default site configuration file.
Remove all the text inside the 000-default.conf and copy and paste the following configurations:
<VirtualHost *:80>
        ServerName www.incaptestsite.tk
        ServerAlias incaptestsite.tk
        ServerAdmin awesomeadmin@doesntmatter.com
        DocumentRoot /var/www/incaptestsite.tk
        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>

<VirtualHost *:443>
        ServerName www.incaptestsite.tk
        ServerAlias incaptestsite.tk
        ServerAdmin awesomeadmin@doesntmatter.com
        DocumentRoot /var/www/incaptestsite.tk
        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log combined
        SSLEngine on
        SSLCertificateFile /etc/apache2/sites-available/incaptestsite.tk.crt
        SSLCertificateKeyFile /etc/apache2/sites-available/incaptestsite.tk.key
</VirtualHost>

     6. Make sure to point the ServerName and ServerAlias to your own domain, point the DocumentRoot to your own /var/www/mydomainname.tk and point SSLCertificateFile and SSLCertificateKeyFile to the file names of your own self-signed certificate and key you've created in step 3.a.

     7. Save the document and exit (Ctrl + O).

     8. Enable SSL mode, by running the following command: sudo a2enmod ssl

     9. Create a simple HTML Index file to test accessibility of the site. Go to your domain root folder (cd /var/www/mydomainname.tk), use nano to create a simple html file (sudo nano index.html), copy/paste the following HTML code and save the file:

<html>

<head>

</head>

<body>

<h1>It works!</h1>

</body>

</html>

     10. Lets launch the Apache2 server by running the following command: sudo service apache2 start . You can check if the server is running as expected by using the following command: sudo service apache2 status. Please note, you will not be able to access the site publicly just yet.

Step 6 - Configuring AWS access list(Important!!! Preventing error code 20):
As a Support, we see a lot of cases where customer did not whitelist the IP ranges of Incapsula as needed. In this step, this is exactly what we are going to do.

In AWS, go to Services > EC2 and find Network & Security > Security Groups (on the left panel). Click it.
On the available list, you will have list of 2 Group IDs launch-wizard-1 and default. Click on launch-wizard-1, choose Inbound tab on the bottom and click Edit.
For now you should have only 1 Type (SSH), which allows SSH connections from 0.0.0.0/0 (Any IP). Make sure to leave it as it is, otherwise you will lockout yourself out of your Ubuntu instance.
Click Add Rule, change Type to HTTPS. Click Add Rule, change Type to HTTP. Do not change the IP address just yet, as we want to test Public connections to our site.
You can now check if the site is accessible via the following urls: http://<YourIPAddress> and https://<YourIPAddress>
If you followed the steps correctly, your site will be accessible via HTTP and HTTPS.
Step 7 - Pointing Freenom domain to your AWS hosting:
Go to Freenom.
Go to Services > My Domains, find the domain you've created and click Manage Domain on the right.
Click Manage Freenom DNS.
Create DNS records as follows:
Name: leave it empy, Type: A, TTL: 300, Target: Your AWS Public IPv4.
Click +More Records, Name: www, Type: A, TTL: 300, Target: Your AWS Public IPv4.
Save Changes.
Allow it about 5-10 minutes of Global propagation and access your site: http://www.incaptestsite.tk or https://www.incaptestsite.tk.
