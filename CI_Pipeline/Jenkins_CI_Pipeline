// Variable for input
def userInput
def _BuildVersion

pipeline 
{
    options
    {
        timeout(time: 30, unit: 'MINUTES')
    }
	agent
	{
		label 'master'
	}
	stages
	{
		stage('Checkout From GIT')
		{
			steps
			{
				dir('Course')
				{
					script
					{
						git credentialsId: 'DevOpsINT', url: 'https://github.com/DevOpsINT/Course.git' , branch: 'gadi'

						_CurrentGitVersion = sh script:"git tag | sort -r | head -1", returnStdout: true
                        _CurrentGitVersion = _CurrentGitVersion.trim()
                        echo("CurrentGitVersion Is: ${_CurrentGitVersion}")

                        _NextGitVersion = _CurrentGitVersion + 1

                        _CurrentCommitIdShort = sh script:"git rev-parse HEAD | cut -c1-10", returnStdout: true
                        echo("CurrentCommitIdShort Is: ${_CurrentCommitIdShort}")

                        _BuildVersion = "${_CurrentGitVersion}_${_CurrentCommitIdShort}"
                        _BuildVersion = _BuildVersion.trim()
                        echo("BuildVersion Is: ${_BuildVersion}")
					}
				}
			}
		}
		stage ('Unit Test')
		{
			steps
			{
				dir('App_UT')
				{
					script
					{
						try
						{
							//Run UniTest
							sh 'python ExperimentTests.py'
						}
						catch (err)
						{
							println("Unit Test failed for ${_BuildVersion}")
							currentBuild.result = 'Fail'
						}
					}
					sh 'cp -Rr ../CI_Pipeline/files/* .'
					stash includes: '*', name: 'copy_to_slave', useDefaultExcludes: false
				}
			}
		}
	}

	agent
	{
		label 'slave'
	}
	stages
	{
		stage('docker build')
		{
			steps
			{
				dir('tmp')
				{
					script
					{
						unstash 'copy_to_slave'
						try
						{
							sh "docker build -t ${_BuildVersion} . "

							//Save docker image on slave, problem that slave disk space is limited!!!!
							//sh "docker save ${_BuildVersion} > ${_BuildVersion}.tar"
							//sh "ls -sh ${_BuildVersion}.tar"
						}
						catch (err)
						{
							println("docker build fail")
							currentBuild.result = 'Fail'
						}
					}
				}
			}
		}
		stage('docker run for UT')
		{
			steps
			{
				dir('tmp')
				{
					script
					{
						try
						{
							sh "docker run - d ${_BuildVersion}"
							_dockerlogs = "docker logs ${_BuildVersion}"
							echo("_dockerlogs= ${_dockerlogs}")
							if ( _dockerlogs.toString() != "Hello world!" )
							{
								echo "UT on container fail"
								currentBuild.result = 'Fail'
							}
						}
						catch (err)
						{
							println("docker build fail")
							currentBuild.result = 'Fail'
						}
					}
				}
			}
		}
	}

	agent
	{
		label 'master'
	}
	stages
	{
		stage ('Copy Unit Test Files To Ansible Folder')
		{
			steps
			{
				dir('CI_Pipeline')
				{
					script
					{
						unstash 'copy_to_master'
						sh 'pwd'
						sh 'ls -ltr'
						sh 'ls ../App_UT'
						sh 'cp -Rr ../App_UT/* files/'
						sh 'ls files'
					}
				}
			}
		}
		stage('Interactive IP Input')
		{
			steps
			{
				script
				{
					// Get the input
					_userInput = input (id: '_userInput', message: 'Please Enter Remote Machine IP:',
						parameters:
						[
							string
							(
								defaultValue: '35.160.199.228',
								description: 'IP of the machine to procced the pipeline connabds',
								name: 'IP'
							),
						]
					)

					// Echo to console
					echo("Entered IP Is: ${_userInput}")
				}
			}
		}
		stage('Save Input Value Into Hosts File')
		{
			steps
			{
				dir('CI_Pipeline')
				{
					script
					{
						//Save _userInput value
						sh "pwd"
						sh "ls"
						sh "echo $_userInput >> hosts"
						sh "cat hosts"
						sh "pwd"
					}
				}
			}
		}
		stage('Run Ansible Pipeline')
		{
			steps
			{
				dir('CI_Pipeline')
				{
					script
					{
						//Run Ansible Playbook
						sh "pwd"
						sh "ls"
						// Check Java Version
						//sh "ps axufwwww | grep 'jenkins | java' - "
						// Show PEM Content File
						//sh "cat /var/jenkins_home/.ssh/AWS_Key_Instance1.pem"

						// Run Ansible
						sh "ansible-playbook -vvvv -i hosts -u ubuntu -b --private-key=/var/jenkins_home/.ssh/AWS_Key_Instance1.pem playbook.yml"
					}
				}
			}
		}
/*		stage('Push Tag Version')
		{
        steps
			{
				dir('Course')
				{
                    script
					{
                        withCredentials([usernamePassword(credentialsId: 'DevOpsINT', passwordVariable: 'Password', usernameVariable: 'Username')])
						{
							sh('git status')
							sh('git config --global user.name "Gadi"')
							sh('git config --global user.email "gadigamburg@gmail.com"')
							sh('git checkout gadi')
							sh('git pull')
							sh('git tag ${_BuildVersion}')
							//sh('git add .')
							//sh('git commit -m "Commit Tag Version: ${_BuildVersion"')
                            sh('git status')
							sh('git push https://${Username}:${Password}@github.com/DevOpsINT/Course.git gadi ${_BuildVersion}')
						}
                    }
				}
			}
		}*/
	}
}

