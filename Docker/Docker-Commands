# Container Lifetime & Persistent Data: Volumes, Volumes, Volumes
#
# ## Persistent Data: Data Volumes
#
# docker pull mysql
#
# docker image inspect mysql
#
# docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True mysql
#
# docker container ls
#
# docker container inspect mysql
#
# docker volume ls
#
# docker volume inspect TAB COMPLETION
#
# docker container run -d --name2 mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True mysql
#
# docker volume ls
#
# docker container stop mysql
#
# docker container stop mysql2
#
# docker container ls
#
# docker container ls -a
#
# docker volume ls
#
# docker container rm mysql mysql2
#
# docker volume ls
#
# docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True -v mysql-db:/var/lib/mysql mysql
#
# docker volume ls
#
# docker volume inspect mysql-db
#
# docker container rm -f mysql
#
# docker container run -d --name mysql3 -e MYSQL_ALLOW_EMPTY_PASSWORD=True -v mysql-db:/var/lib/mysql mysql
#
# docker volume ls
#
# docker container inspect mysql3
#
# docker volume create --help
#
# ## Persistent Data: Bind Mounting
#
# cd dockerfile-sample-2
#
# pcat Dockerfile
#
# docker container run -d --name nginx -p 80:80 -v $(pwd):/usr/share/nginx/html nginx
#
# docker container run -d --name nginx2 -p 8080:80 nginx
#
# docker container exec -it nginx bash
#
#
#

# Creating and Using Containers Like a Boss
#
# ## Check Our Docker Install and Config
#
# docker version
#
# docker info
#
# docker
#
# docker container run
#
# docker run
#
# ## Starting a Nginx Web Server
#
# docker container run --publish 80:80 nginx
#
# docker container run --publish 80:80 --detach nginx
#
# docker container ls
#
# docker container stop 690
#
# docker container ls
#
# docker container ls -a
#
# docker container run --publish 80:80 --detach --name webhost nginx
#
# docker container ls -a
#
# docker container logs webhost
#
# docker container top
#
# docker container top webhost
#
# docker container --help
#
# docker container ls -a
#
# docker container rm 63f 690 ode
#
# docker container ls
#
# docker container rm -f 63f
#
# docker container ls -a
#
# ## Container VS. VM: It's Just a Process
#
# docker run --name mongo -d mongo
#
# docker ps
#
# docker top mongo
#
# docker stop mongo
#
# docker ps
#
# docker top mongo
#
# docker start mongo
#
# docker ps
#
# docker top mongo
#
# ## Getting a Shell Inside Containers: No Need for SSH
#
# docker container run -help
#
# docker container run -it --name proxy nginx bash
#
# docker container ls
#
# docker container ls -a
#
# docker container run -it --name ubuntu ubuntu
#
# docker container ls
#
# docker container ls -a
#
# docker container start --help
#
# docker container start -ai ubuntu
#
# docker container exec --help
#
# docker container exec -it mysql bash
#
# docker container ls
#
# docker pull alpine
#
# docker image ls
#
# docker container run -it alpine bash
#
# docker container run -it alpine sh
#
# ## Docker Networks: Concepts for Private and Public Comms in Containers
#
# docker container run -p 80:80 --name webhost -d nginx
#
# docker container port webhost
#
# docker container inspect --format '{{ .NetworkSettings.IPAddress }}' webhost
#
# ## Docker Networks: CLI Management of Virtual Networks
#
# docker network ls
#
# docker network inspect bridge
#
# docker network ls
#
# docker network create my_app_net
#
# docker network ls
#
# docker network create --help
#
# docker container run -d --name new_nginx --network my_app_net nginx
#
# docker network inspect my_app_net
#
# docker network --help
#
# docker network connect
#
# docker container inspect TAB COMPLETION
#
# docker container disconnect TAB COMPLETION
#
# docker container inspect
#
# ## Docker Networks: DNS and How Containers Find Each Other
#
# docker container ls
#
# docker network inspect TAB COMPLETION
#
# docker container run -d --name my_nginx --network my_app_net nginx
#
# docker container inspect TAB COMPLETION
#
# docker container exec -it my_nginx ping new_nginx
#
# docker container exec -it new_nginx ping my_nginx
#
# docker network ls
#
# docker container create --help
#
#

# Swarm Basic Features and How to Use Them In Your Workflow

## Scaling Out with Overlay Networking

docker network create --driver overlay mydrupal

docker network ls

docker service create --name psql --network mydrupal -e POSTGRES_PASSWORD=mypass postgres

docker service ls

docker service ps psql

docker container logs psql TAB COMPLETION

docker service create --name drupal --network mydrupal -p 80:80 drupal

docker service ls

watch docker service ls

docker service ps drupal

docker service inspect drupal

## Scaling Out with Routing Mesh

docker service create --name search --replicas 3 -p 9200:9200 elasticsearch:2

docker service ps search

## Swarm Stacks and Production Grade Compose

docker stack deploy -c example-voting-app-stack.yml voteapp

docker stack

docker stack ls

docker stack ps voteapp

docker container ls

docker stack services voteapp

docker stack ps voteapp

docker network ls

docker stack deploy -c example-voting-app-stack.yml voteapp

## Using Secrets in Swarm Services

docker secret create psql_usr psql_usr.txt

echo "myDBpassWORD" | docker secret create psql_pass - TAB COMPLETION

docker secret ls

docker secret inspect psql_usr

docker secret create --name psql --secret psql_user --secret psql_pass -e POSTGRES_PASSWORD_FILE=/run/secrets/psql_pass -e POSTGRES_USER_FILE=/run/secrets/psql_user postgres

docker service ps psql

docker exec -it psql.1.CONTAINER NAME bash

docker logs TAB COMPLETION

docker service ps psql

docker service update --secret-rm

## Using Secrets with Swarm Stacks

vim docker-compose.yml

docker stack deploy -c docker-compose.yml mydb

docker secret ls

docker stack rm mydb



