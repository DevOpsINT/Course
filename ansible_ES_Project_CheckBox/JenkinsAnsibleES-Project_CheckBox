// Variable for input
def userInput
def optionList = []
def optionFinal = []

def createBooleanParameter(String value, String desc)
{
    return [$class: 'BooleanParameterDefinition', defaultValue: false, name: value, description: desc]
}

pipeline 
{
    options
    {
        timeout(time: 30, unit: 'MINUTES')
    }
	agent
	{
		label 'master'
	}
	stages
	{
		stage('Checkout')
		{
			steps
			{
				dir('Course')
				{
					script
					{
						git credentialsId: 'DevOpsINT', url: 'https://github.com/DevOpsINT/Course.git' , branch: 'gadi'
						sh 'ls'
					}
				}
			}
		}
		stage('Interactive_Input')
		{
			steps
			{
				script
				{
					// Get the input
					userInput = input (id: 'userInput', message: 'Please Enter Remote Machine IP:',
								parameters: 
								[
									string
									(
										defaultValue: '35.160.199.228',
										description: 'IP of the machine to procced the pipeline connabds',
										name: 'IP'
									),
								]
							  )

					// Echo to console
					echo("Entered IP Is: ${userInput}")
		    	}
			}
		}
		stage('Save Input Value Into Hosts File')
		{
			steps
			{
				dir('ansible_ES_Project_CheckBox')
				{
					script
					{
						//Save userInput value
						sh "pwd"
						sh "ls"
						sh "echo $userInput >> hosts"
						sh "cat hosts"
						sh "pwd"
					}
				}
			}
		}
		stage('Choose Requested Module And Version From Dir List (ls)')
		{
			steps
			{
				dir('ansible_ES_Project_CheckBox')
				{
					script
					{
						//Read AvailibleModules File
						_ModulesList = sh script: 'ls roles', returnStdout: true
						println(_ModulesList)

						//Choices parameter
						_ChosenModule = input message: 'Please choose which module to install from the list below',
						ok: 'Confirm',
						parameters: [choice(name: '', choices: "${_ModulesList}", description: '')]
        				_ChosenModuleName = _ChosenModule
						println(_ChosenModuleName)

                        if(_ChosenModuleName.indexOf(":")!=-1)
                        {
                           	_ChosenModuleVer = _ChosenModule.split(/:/)[1]
                           	println(_ChosenModuleVer)
                        }
                        else
                        {
                           	_ChosenModuleVer = ""
                           	println(_ChosenModuleVer)
                        }
					}
				}
			}
		}

        stage ('Create text file')
        {
            steps
            {
                dir('ansible_ES_Project_CheckBox')
                {
                    script
                    {
                        //sh "echo option1 > file.txt"
                        //sh "echo option2 >> file.txt"
                        //sh "echo option3 >> file.txt"
                        //sh "echo option4 >> file.txt"
                        //optionList = sh script: 'cat file.txt', returnStdout: true
                        optionList = sh script: 'ls roles', returnStdout: true
                        println(optionList.getClass())
                    }
                }
            }
        }
        stage ('Choose option')
        {
            steps
            {
                script
                {
                    List<ParameterDefinition> optionChoices = new LinkedList<ParameterDefinition>()
                    for ( option in optionList.split('\n') )
                    {
                        optionChoices.add(createBooleanParameter(option,''))
                    }

                    optionInput = input(id: 'option', message: 'Please Choose Desirable Modules To Execute', parameters: optionChoices)
                        for ( option in optionInput )
                        {
                            if ( option.toString().contains("true") )
                            {
                                option = option.toString().split('=')[0]
                                optionFinal.add(option)
                            }
                        }
                    println(optionFinal)
                }
            }
        }

		stage('Run Ansible Pipeline')
		{
			steps
			{
				dir('ansible_ES_Project_CheckBox')
				{
					script
					{
						//Run Ansible Playbook
						sh "pwd"
						sh "ls"
						sh "which ansible"
						sh "ps axufwwww | grep 'jenkins | java' - "
						sh "cat /var/jenkins_home/.ssh/AWS_Key_Instance1.pem"

                        //Execute Each Selected Module In Chosen Array Options
                        for ( finalOption in optionFinal )
                        {
                            if(finalOption.indexOf(":")!=-1)
                            {
                           	    _ChosenModuleVer = finalOption.split(/:/)[1]
                               	println(_ChosenModuleVer)
                            }
                            else
                            {
                                _ChosenModuleVer = ""
                               	println(_ChosenModuleVer)
                            }
                            echo("Executing: ${finalOption}")

						    //Install Selected Modul${_ChosenModuleName}e
						    sh "ansible-playbook -vv -u ubuntu -i hosts -b --private-key=/var/jenkins_home/.ssh/AWS_Key_Instance1.pem -e hosts=${userInput} -e ModuleName=${_ChosenModuleName} -e _SelectedVersion=${_ChosenModuleVer}  main.yml"
						}
					}
				}
			}
		}
/*		stage('push new file')
		{
        steps
			{
				dir('Course')
				{
                    script
					{
                        withCredentials([usernamePassword(credentialsId: 'DevOpsINT', passwordVariable: 'Password', usernameVariable: 'Username')])
						{
							sh('pwd')
							sh('git status')
							sh('git config --global user.name "Gadi"')
							sh('git config --global user.email "gadigamburg@gmail.com"')
							sh('git checkout gadi')
							sh('git pull')
							sh('echo testing > ifconfig.file')
							sh('git add .')
							sh('git commit -m "Auto Push Pipeline gadi_file"')
                            sh('git status')
							sh('git push https://${Username}:${Password}@github.com/DevOpsINT/Course.git gadi')
						}
                    }
				}
			}
		}*/
	}
}

