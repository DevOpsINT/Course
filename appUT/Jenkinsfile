def BuildVersion

 pipeline {
   options {
      timeout(time: 30, unit: 'MINUTES')
   }
  environment {
    registry = "rozdockerforever/myfirstimage"
    registryCredential = 'dockerhub'
    dockerImage = ''
  }
    agent {
        label 'master'
    }
    stages {
        stage ('Checkout') {
            steps {
                script {
                    deleteDir()
                    checkout([$class: 'GitSCM', branches: [[name: '*/rozana']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/DevOpsINT/Course.git']]])
            			       		CurrentGitVersion = sh script:"git tag | sort -r | head -1", returnStdout: true
                        CurrentGitVersion = CurrentGitVersion.trim()
                        echo("CurrentGitVersion Is: ${CurrentGitVersion}")
                        CurrentCommitIdShort = sh script:"git rev-parse HEAD | cut -c1-10", returnStdout: true
                        echo("CurrentCommitIdShort Is: ${CurrentCommitIdShort}")
                        BuildVersion = "${CurrentGitVersion}_${CurrentCommitIdShort}"
                        BuildVersion = BuildVersion.trim()
                        echo("BuildVersion Is: ${BuildVersion}")

                }
            }
        }
        stage ('Unit Test') {
            steps {
                script {
                    dir ('./appUT/') {
                        try {
                            sh 'echo ${BuildVersion}'
                            sh 'python ExperimentTests.py'
                            echo("BuildVersion inside UT Is: ${BuildVersion}")
                        } catch (err) {
                            println("Unit Test failed for ${BuildVersion}")
                            currentBuild.result = 'UNSTABLE'
                        }
                      sh 'pwd'
                      sh 'ls'
                      stash includes: '*', name: 'assign2_files', useDefaultExcludes: false
                    }
                }
            }
        }
        

       stage('docker build on jenkins_slave remote machine') {
           agent { label 'jenny_slave' }
              steps {
               script{
                 dir('./opt/jennkins_slave') {
                    unstash 'assign2_files'
                   echo("BuildVersion inside docker build Is: ${BuildVersion}")
                    sh 'pwd'
                    sh 'ls'
                   	try {
			         sh "sudo docker build -t image_version:${BuildVersion} ."
				// dockerImage = docker.image('image_version:${BuildVersion')
				//dockerImage = docker.build(image_version:${BuildVersion}) registry + ":image_version:${BuildVersion}"
		            } catch (err)	{
			       println("docker build image_version:${BuildVersion} failed")
			       sh "sudo docker rmi image_version:${BuildVersion}"
		               currentBuild.result = 'Fail'
		         }
                     }
                 }
             }
         }
	stage('upload docker image to dockerhub') {
		  agent { label 'jenny_slave' }
			steps
			{
			    script
			       {
				       sh'sudo usermod -aG docker ubuntu'
				       sh 'pwd'
				       sh 'ls'
				 dir('/opt/jennkins_slave/workspace/class_assignment2/appUT/'){
					 sh 'pwd'
					 sh 'ls'
	               
				 sh "docker images"
			         sh "docker tag image_version:${BuildVersion} ${registry}:${BuildVersion}"
				  docker.withRegistry( '', registryCredential ) {
        			     sh "docker push ${registry}:${BuildVersion}"
        		          }
					//removing image from aws machine
					sh script: "docker rmi -f image_version:${BuildVersion}"
					sh "docker images"
				 }//dir
			        }//script	
			 }//steps
		 }
	    	stage('running playbook') {
			agent { label 'master' }
		
			steps
			{
			    script
			       {
				      
				        sh 'pwd'
					sh 'ls'
			         dir('appUT/ansible_dir'){
					 sh 'pwd'
					
					 sh 'ls'
				     sh "ansible-playbook -i hosts -u ubuntu -b --private-key=/var/jenkins_home/new2machines.pem-e myfirstimage:${BuildVersion} -e pulling_image_from_dockerhub=${registry}:${BuildVersion} playbook.yml"
			         }
        		        
				
		               }
			      
			 }//steps
		 }
         }
}
