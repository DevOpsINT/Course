def BuildVersion

 pipeline {
   options {
      timeout(time: 30, unit: 'MINUTES')
   }
    agent {
        label 'master'
    }
    stages {
        stage ('Checkout') {
            steps {
                script {
                    deleteDir()
                    checkout([$class: 'GitSCM', branches: [[name: '*/rozana']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/DevOpsINT/Course.git']]])
            			       		CurrentGitVersion = sh script:"git tag | sort -r | head -1", returnStdout: true
                        CurrentGitVersion = CurrentGitVersion.trim()
                        echo("CurrentGitVersion Is: ${CurrentGitVersion}")
                        CurrentCommitIdShort = sh script:"git rev-parse HEAD | cut -c1-10", returnStdout: true
                        echo("CurrentCommitIdShort Is: ${CurrentCommitIdShort}")
                        BuildVersion = "${CurrentGitVersion}_${CurrentCommitIdShort}"
                        BuildVersion = BuildVersion.trim()
                        echo("BuildVersion Is: ${BuildVersion}")

                }
            }
        }
        stage ('Unit Test') {
            steps {
                script {
                    dir ('./appUT/') {
                        try {
                            sh 'echo ${BuildVersion}'
                            sh 'python ExperimentTests.py'
                            echo("BuildVersion inside UT Is: ${BuildVersion}")
                        } catch (err) {
                            println("Unit Test failed for ${BuildVersion}")
                            currentBuild.result = 'UNSTABLE'
                        }
                      sh 'pwd'
                      sh 'ls'
                      stash includes: '*', name: 'assign2_files', useDefaultExcludes: false
                    }
                }
            }
        }
        

       stage('docker build on jenkins_slave remote machine') {
           agent { label 'assignment2' }
              steps {
               script{
                 dir('./var/jenkins_assign2') {
                    unstash 'assign2_files'
                   echo("BuildVersion inside docker build Is: ${BuildVersion}")
                    sh 'sudo usermod -a -G docker ubuntu'
                    sh 'pwd'
                    sh 'ls'
                   	try {
				sh "docker build -t image_version:${BuildVersion} ."
			} catch (err)	{
			       println("docker build Version:${BuildVersion} failed")
			       sh "docker rmi Version:${BuildVersion}"
		               currentBuild.result = 'Fail'
		        }
                 }
              }
           }
       }
    }
}
