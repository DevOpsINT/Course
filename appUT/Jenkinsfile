pipeline {
  options {
      timeout(time: 30, unit: 'MINUTES')
  }
    agent {
        label 'master'
    }
  
    stages {
        stage ('Checkout') {
            steps {
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/vered']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '54b659e0-6047-495c-bd66-d371d1bd3ae8', url: 'https://github.com/DevOpsINT/Course.git']]]
                    CurrentVersion = sh script:"git tag | sort -r | head -1", returnStdout: true
                    CurrentVersion = CurrentVersion.trim()
                    nextVersion = CurrentVersion + 1
                    commitIDshort = sh script:"git rev-parse HEAD | cut -c1-10", returnStdout: true
                    BuildVersion = "${CurrentVersion}_${commitIDshort}"
                }
            }
        }
        stage ('Unit Test') {
            steps {
                script {
                    dir ('./appUT') {
                        try {
                            sh 'python ExperimentTests.py'
                        } catch (err) {
                            println("Unit Test failed for ${BuildVersion}")
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
        }
     
       stage ('build slave') {
          agent {
              label ('slave')
          }
         steps {
              script {
                  stash includes: '/root/Course/appUT/Dockerfile', name: 'Dfile'
              }
          }
          steps {
              script {
                   dir ('/tmp/') {
                   unstash 'Dfile' 
                   sh 'Docker build . -t app:${BuildVersion}'
                  }
              }  
          }
      }
   }
}
  
